#!groovy

String projectName = 'token-plugin'

def sovLibrary = library(identifier: 'sovrin-aws-codebuild@v1.0.2', retriever: modernSCM(
    github(credentialsId: 'sovbot-github', repoOwner: 'sovrin-foundation', repository: 'aws-codebuild-pipeline-plugin')
)).com.sovrin.pipeline

def getParam(name) {
    return (params."$name" ?: env."$name")
}

def getApprove(name) {
    def approval
    try {
        input(message: 'Do you want to publish this package?')
        approval = true
        echo "$name approval granted"
    }
    catch (Exception err) {
        approval = false
        echo "$name approval denied"
    }
    return approval
}

logger = sovLibrary.Logger.new(this)
notifier = sovLibrary.Notifier.new(this)
utils = sovLibrary.Utils.new(this)
logger.setGlobalLevel('TRACE')

String gitHubUserCredId = getParam('GITHUB_BOT_USER') ?: 'sovbot-github'
String sovrinPackagingRepo = getParam('env.SOVRIN_PACKAGING_REPO') ?: 'https://github.com/sovrin-foundation/sovrin-packaging'
String sovrinPackagingBranch = getParam('SOVRIN_PACKAGING_BRANCH') ?: 'master'
String repoName = getParam('SOVRIN_CORE_REPO_NAME') ?: 'core'
String repoComponent = getParam('SOVRIN_CORE_REPO_CHANNEL') ?: env.BRANCH_NAME ?: 'master'

def nodeLabels = [
    codeBuild: env.LIBSOVTOKEN_CODEBUILD_NODE_LABEL ?: 'codebuild',
    macos: env.LIBSOVTOKEN_MACOS_NODE_LABEL ?: 'macos',
]

pipelineWrapper({
    //put code build containers inside a vpc under our dev account
    env.USE_VPC_CONFIG = true
    //this IP is outdated, should use the one from env
//    env.SOVRIN_REPO_HOST = '192.168.11.115'

    Boolean isRC = false
    Boolean isRelease = false
    Boolean isDev = (env.BRANCH_NAME == 'master')
    List pkgsList = []
    String debsDir = 'debs'
    String pkgUtilsDir = 'sovrin-packaging'

    Closure _upload = {
        logger.info("Uploading debian packages to '${repoName}/${repoComponent}' sovrin repo: $pkgsList")
        String u_id = utils.shStdout('id -u')
        docker.build(
                "$projectName:debs-upload",
                "--build-arg=u_id=$u_id -f devops/docker/cd/debs_upload.dockerfile devops/docker/cd"
        ).inside {
            withCredentials([file(credentialsId: 'SovrinRepoSSHKey', variable: 'sovrin_key')]) {
                sh """
                    ./$pkgUtilsDir/upload_debs.py $debsDir $repoName $repoComponent --host $env.SOVRIN_REPO_HOST --ssh-key $sovrin_key
                """
            }
        }
    }

    Closure _notify = {
        notifier.email {
            to = '$DEFAULT_RECIPIENTS ' + (this.env.LIBSOVTOKEN_DEF_RECIPIENTS ?: '')
            subject = "[$projectName] new packages ${pkgsList.join(' ')} published to '${repoName}/${repoComponent}' repo"
            body = """
                |New debian packages ${pkgsList.join(' ')} were built and published to '${repoName}/${repoComponent}' repo
                |
                |Build:
                |   Project: \$PROJECT_NAME
                |   Url: ${this.env.BUILD_URL}
                |   Number: ${this.env.BUILD_NUMBER}
                |
                |Check console output at ${this.env.BUILD_URL}console to view the details.
            """.stripMargin()
        }
    }

    nodeWrapper(nodeLabels.codeBuild) {
        def osname = 'xenial'
        List projects = ['sovtoken', 'sovtokenfees']
        String indyNodeVersion

        def sovrinRepo = sovLibrary.SovrinRepo.new(this)
        def buildCtx = sovLibrary.AwsCodeBuildHelper.BuildCtx.new('plugin',
            ['devops', 'sovtoken/sovtoken/__metadata__.py', 'sovtokenfees/sovtokenfees/__metadata__.py'])
        def awsCBHelper = sovLibrary.AwsCodeBuildHelper.new(this, buildCtx)

        stage('Checkout sources from SCM') {
            checkout scm
        }

        stage('Set release params') {
            indyNodeVersion = utils.shStdout("""
                sed -n "s/.*indy-node==\\([^\\"\\']\\+\\).*/\\1/p" sovtoken/setup.py
            """)
            if (!indyNodeVersion) {
                throw new Exception('indy-node version is not found')
            }
            logger.info("Detected indy-node version: '$indyNodeVersion'")

            isRC = (env.BRANCH_NAME == 'stable')
            isRelease = !!(isRC && !indyNodeVersion.find(/[^0-9\.]/))
            logger.info("Release parameters: isRC: $isRC, isRelease: $isRelease")
        }

        Map builds = [
            "s3-upload": {  // performs on the current jenkins node
                stage('Upload source to S3') {
                    awsCBHelper.uploadSourceToS3()
                }
             },
            "ecr-create": [
                nodeLabel: "${nodeLabels.codeBuild}",
                build: {
                    stage('Prepare AWS ECR repo') {
                        awsCBHelper.createECRRepo()
                    }
                }
            ]
        ]

        stage("Prepare common env") {
            builds.failFast = false
            utils.parallel builds
        }

        builds = projects.collectEntries { proj ->
            String projLabel = "$osname-$proj"

            ["$projLabel": [
                nodeLabel: "${nodeLabels.codeBuild}",
                build: {
                    def packageName = proj
                    def prTag = "ci-$osname-$proj" // use ci project
                    def srcVersion
                    def lastRevision
                    def debPVersion
                    def goals = ['package']

                    def ciImageTag

                    stage('Get source version') {
                        srcVersion = utils.shStdout("SRC_DIR_NAME=$proj make -C devops src_version -s")
                        logger.info("Current source version: $srcVersion")
                    }

/*
                    stage('Get last revision') {
                        lastRevision = evernymRepo.getLastRevision {
                            delegate.packageName = packageName
                            packageSrcVersion = srcVersion
                            repoDistr = 'agency-dev'
                        }

                        if (lastRevision) {
                            logger.info("Found last revision number: $lastRevision")
                        } else {
                            logger.info("No previous revision was found")
                        }
                    }
*/

                    stage('Set release parameters') {
                        def releaseVersion =  isRelease ? '' : (isRC ? 'rc' : isDev ? 'dev' : '') + "$BUILD_NUMBER"
                        debPVersion = "$srcVersion${releaseVersion ? '~' + releaseVersion : ''}"
                        logger.info("Package version for sovrin repo: $debPVersion")
                    }

                    stage("$projLabel: Resolve image tag") {
                        def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_ci_version -s")
                        ciImageTag = "$_imgVersion-$osname-$proj-ci"
                        logger.info("CI docker image tag: $ciImageTag")
                    }

                    awsCBHelper.build() {
                        projectTag = prTag

                        // build spec for env image
                        envBuildSrc = ['devops', "${proj}/${proj}/__metadata__.py"] // TODO make more accurate
                        envBuildCmds = [
                                'export PROJECT_DIR=$PWD',
                                'make -C devops image_ci'
                        ]
                        envBuildEnvv = [
                                [name: 'OSNAME', value: osname],
                                [name: 'SRC_DIR_NAME', value: proj],
                                [name: 'DOCKER_NAME', value: awsCBHelper.buildCtx.projectName],
                                [name: 'DOCKER_TAG', value: ciImageTag],
                        ]

                        // env and build spec
                        imageTag = ciImageTag
                        buildspec = 'devops/aws-codebuild/buildspec.yml'
                        envv = [
                                [name: 'OSNAME', value: osname],
                                [name: 'MAKE_GOALS', value: 'package'],
                                [name: 'SRC_DIR_NAME', value: proj],
                                [name: 'ARTIFACTS', value: "devops/_build/${proj}/*${packageName}*.*"], // TODO more accurate here
                                [name: 'FPM_P_VERSION', value: debPVersion],
                        ]

                        onArtifacts = {
                            this.stage("$projLabel: Archive logs") {
                                this.utils.archiveArtifacts("logs/*.log*") {
                                    truncate = true
                                    allowEmptyArchive = true
                                }

                                String pkgBaseName = "${packageName}_${debPVersion}"

                                this.stash includes: this.utils.shStdout("ls ${pkgBaseName}_*.deb"), name: pkgBaseName
                                pkgsList += pkgBaseName
                            }
                        }
                    }
                }
            ]]
        }

        stage("Build artifacts") {
            builds.failFast = false
            utils.parallel builds

            dir(debsDir) {
                pkgsList.each {
                    unstash name: it
                }
            }
            sh "ls -la $debsDir"
        }

        stage("Get packaging utils") {
            dir(pkgUtilsDir) {
                git branch: sovrinPackagingBranch, credentialsId: gitHubUserCredId, url: sovrinPackagingRepo
            }
        }

        if (isRC) {
            repoComponent = 'rc'
        }

        stage("Publish to $repoComponent") {
            _upload()
            if (isRelease) {
                stash includes: "$pkgUtilsDir/**/*", name: pkgUtilsDir
                stash includes: "$debsDir/**/*", name: debsDir
            }
        }
    }

    stage("Notify about $repoComponent") {
        _notify()
    }

    if (isRelease) {
        Boolean approval = false
        repoComponent = 'stable'

        stage("QA approval") {
            approval = getApprove("QA")
        }

        if (!approval) {
            return
        }

        nodeWrapper('ubuntu') {
            stage('Checkout sources from SCM') {
                checkout scm
            }

            // Note. it is assumed here that packages are already in a backup
            // directory and their upload would be actually skipped since '--force-backup'
            // is not used
            stage("Publish to $repoComponent") {
                unstash pkgUtilsDir
                unstash debsDir

                _upload()
            }
        }

        stage("Notify about $repoComponent") {
            _notify()
        }
    }
}, { err ->
    if (err) {
        logger.error("Pipeline failed with the error $err")
    }

    stage("Build result notification") {
        notifier.email {
            subject = "[$projectName] \$DEFAULT_SUBJECT"
            to = '$DEFAULT_RECIPIENTS ' + (this.env.LIBSOVTOKEN_DEF_RECIPIENTS ?: '')
        }
    }
})
